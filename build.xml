<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2012-2015 Matt Bertolini

 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 persons to whom the Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<project name="liquibase-slf4j" basedir="." default="build" xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:ac="antlib:net.sf.antcontrib" xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:findbugs="antlib:com.google.code.findbugs" xmlns:jxr="antlib:com.mattbertolini.jxr.ant"
         xmlns:macro="antmacro:com.mattbertolini.liquibase.slf4j">
    <!-- Properties -->
    <property name="src.main.java.dir" value="${basedir}/src/main/java"/>
    <property name="src.main.resources.dir" value="${basedir}/src/main/resources"/>
    <property name="src.test.java.dir" value="${basedir}/src/test/java"/>
    <property name="src.test.resources.dir" value="${basedir}/src/test/resources"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="build.temp.dir" value="${build.dir}/temp"/>
    <property name="build.main.dir" value="${build.dir}/main"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.javadoc.dir" value="${build.dir}/javadoc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property file="build.properties"/>

    <fail message="Ant version 1.8.0 or later is required to run.">
        <condition>
            <not>
                <antversion atleast="1.8"/>
            </not>
        </condition>
    </fail>

    <!-- Conditions -->
    <!--<condition property="offline" value="true" else="false">-->
        <!--<not>-->
            <!--<http url="http://www.google.com/"/>-->
        <!--</not>-->
    <!--</condition>-->

    <condition property="main.java.dir.exists">
        <resourceexists>
            <file file="${src.main.java.dir}"/>
        </resourceexists>
    </condition>
    <condition property="test.java.dir.exists">
        <resourceexists>
            <file file="${src.test.java.dir}"/>
        </resourceexists>
    </condition>
    <condition property="main.resources.dir.exsits">
        <resourceexists>
            <file file="${src.main.resources.dir}"/>
        </resourceexists>
    </condition>
    <condition property="test.resources.dir.exsits">
        <resourceexists>
            <file file="${src.test.resources.dir}"/>
        </resourceexists>
    </condition>

    <!-- Macros -->
    <macrodef name="javacompile" uri="antmacro:com.mattbertolini.liquibase.slf4j">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <element name="compileClasspath" implicit="true" optional="true"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <depend srcdir="@{srcdir}" destdir="@{destdir}" cache="${build.temp.dir}" closure="true">
                <include name= "**/*.java"/>
            </depend>
            <javac srcdir="@{srcdir}" destdir="@{destdir}" source="${project.java.source.version}" target="${project.java.target.version}" fork="true" failonerror="true" includeantruntime="false" debug="true" encoding="UTF-8">
                <compileClasspath/>
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="processresources" uri="antmacro:com.mattbertolini.liquibase.slf4j">
        <attribute name="dir"/>
        <attribute name="todir"/>
        <sequential>
            <sync todir="@{todir}">
                <fileset dir="@{dir}"/>
                <preserveintarget>
                    <include name="**/*.class"/>
                </preserveintarget>
            </sync>
        </sequential>
    </macrodef>

    <!-- Private targets -->
    <target name="-download-ivy">
        <mkdir dir="${lib.build.dir}"/>
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${project.ivy.version}/ivy-${project.ivy.version}.jar" dest="${lib.build.dir}/ivy-${project.ivy.version}.jar" usetimestamp="true"/>
    </target>

    <target name="-init-ivy" depends="-download-ivy">
        <path id="ivy-classpath">
            <fileset dir="${lib.build.dir}"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy-classpath"/>
    </target>

    <target name="-resolve-despendencies" depends="-init-ivy" unless="ivy.resolve.run">
        <ivy:configure file="${project.home}/ivysettings-ant.xml"/>
        <ivy:resolve file="${project.home}/ivy.xml" haltonfailure="false"/>
        <property name="ivy.resolve.run" value="true"/>
    </target>

    <target name="-retrieve-dependencies" depends="-resolve-despendencies" unless="ivy.retrieve.run">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" sync="true" haltonfailure="true"/>
        <ivy:report todir="${build.reports.dependency.dir}"/>
        <ivy:artifactproperty name="dependency.[conf].[artifact]" value="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]"/>
        <property name="ivy.retrieve.run" value="true"/>
    </target>

    <target name="-create-paths" depends="-retrieve-dependencies">
        <path id="build-classpath">
            <fileset dir="${lib.build.dir}"/>
        </path>

        <path id="compile-main-classpath">
            <fileset dir="${lib.compile.dir}"/>
        </path>

        <path id="test-classpath">
            <fileset dir="${lib.test.dir}"/>
        </path>

        <path id="jacoco-classpath">
            <fileset dir="${lib.dir}/jacoco"/>
        </path>

        <path id="findbugs-classpath">
            <fileset dir="${lib.findbugs.dir}"/>
        </path>

        <path id="compile-test-classpath">
            <path location="${build.main.dir}"/>
            <path refid="test-classpath"/>
            <path refid="compile-main-classpath"/>
        </path>

        <path id="run-unit-tests-classpath">
            <path location="${build.main.dir}"/>
            <path location="${build.test.dir}"/>
            <path refid="compile-main-classpath"/>
            <path refid="test-classpath"/>
            <path refid="jacoco-classpath"/>
        </path>
    </target>

    <target name="-load-third-party-tasks" depends="-create-paths">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="build-classpath" uri="antlib:net.sf.antcontrib"/>
        <taskdef resource="org/jacoco/ant/antlib.xml" classpathref="jacoco-classpath" uri="antlib:org.jacoco.ant"/>
        <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpathref="findbugs-classpath" uri="antlib:com.google.code.findbugs"/>
        <taskdef resource="com/mattbertolini/jxr/ant/antlib.xml" classpathref="build-classpath" uri="antlib:com.mattbertolini.jxr.ant"/>
    </target>

    <target name="-compile-main" depends="-create-paths" if="main.java.dir.exists">
        <macro:javacompile srcdir="${src.main.java.dir}" destdir="${build.main.dir}">
            <classpath refid="compile-main-classpath"/>
        </macro:javacompile>
    </target>

    <target name="-process-main-resources" if="main.resources.dir.exsits">
        <macro:processresources dir="${src.main.resources.dir}" todir="${build.main.dir}"/>
    </target>

    <target name="-compile-test" depends="-create-paths" if="test.java.dir.exists">
        <macro:javacompile srcdir="${src.test.java.dir}" destdir="${build.test.dir}">
            <classpath refid="compile-test-classpath"/>
        </macro:javacompile>
    </target>

    <target name="-process-test-resources" if="test.resources.dir.exsits">
        <macro:processresources dir="${src.test.resources.dir}" todir="${build.test.dir}"/>
    </target>

    <target name="-main-classes" depends="-compile-main, -process-main-resources"/>
    <target name="-test-classes" depends="-compile-test, -process-test-resources"/>

    <target name="-main-jar" depends="-main-classes">
        <jar destfile="${dist.dir}/${project.name}-${project.version}.jar">
            <fileset dir="${build.main.dir}"/>
        </jar>
    </target>

    <target name="-main-javadoc-jar" depends="javadoc">
        <jar destfile="${dist.dir}/${project.name}-${project.version}-javadoc.jar">
            <fileset dir="${build.javadoc.dir}"/>
        </jar>
    </target>

    <target name="-main-sources-jar">
        <jar destfile="${dist.dir}/${project.name}-${project.version}-sources.jar">
            <fileset dir="${src.main.java.dir}"/>
        </jar>
    </target>

    <target name="-make-pom" depends="-retrieve-dependencies">
        <ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${dist.dir}/${project.name}-${project.version}.pom" artifactpackaging="jar" templatefile="pom-template.xml" conf="compile">
            <ivy:mapping conf="compile" scope="provided"/>
        </ivy:makepom>
    </target>

    <!-- Public targets -->
    <target name="assemble" description="Assembles the output of this project." depends="-main-jar"/>
    <target name="build" description="Assembles and tests the project." depends="assemble, test"/>

    <target name="clean" description="Deletes the build and dist directories.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="javadoc" description="Generate Javadoc API documentation for the main source code." depends="-load-third-party-tasks, -compile-main, -process-main-resources">
        <ac:outofdate>
            <ac:sourcefiles>
                <fileset dir="${src.main.java.dir}" includes="**/*.java"/>
            </ac:sourcefiles>
            <ac:mapper type="glob" dir="${src.main.java.dir}" from="*.java" to="${build.javadoc.dir}/*.html"/>
            <ac:sequential>
                <javadoc destdir="${build.javadoc.dir}" failonerror="true" classpathref="compile-classpath" windowtitle="Liquibase SLF4J Logger Documentation" charset="UTF-8">
                    <packageset dir="${src.main.java.dir}" defaultexcludes="true"/>
                    <link href="http://docs.oracle.com/javase/6/docs/api/"/>
                    <link href="http://www.liquibase.org/javadoc/"/>
                    <link href="http://slf4j.org/apidocs/"/>
                    <doctitle>Liquibase SLF4J Logger Documentation</doctitle>
                </javadoc>
            </ac:sequential>
        </ac:outofdate>
    </target>

    <target name="dependencies" description="Displays all the dependencies in this project." depends="-retrieve-dependencies">
        <ivy:dependencytree/>
    </target>

    <target name="test" description="Runs all the unit tests." depends="-load-third-party-tasks, -main-classes, -test-classes" unless="test.run">
        <mkdir dir="${build.reports.unittest.dir}"/>
        <jacoco:coverage destfile="${build.reports.coverage.dir}/${project.name}-coverage.exec">
            <junit haltonerror="false" haltonfailure="false" printsummary="true" errorproperty="test.failed" failureproperty="test.failed" fork="true" forkmode="once">
                <classpath refid="run-unit-tests-classpath"/>
                <formatter type="xml"/>
                <batchtest fork="true" todir="${build.reports.unittest.dir}">
                    <fileset dir="${build.test.dir}">
                        <include name="**/*Test.class"/>
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>
        <junitreport todir="${build.reports.unittest.dir}">
            <fileset dir="${build.reports.unittest.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports.unittest.dir}"/>
        </junitreport>
        <jacoco:report>
            <jacoco:executiondata>
                <file file="${build.reports.coverage.dir}/${project.name}-coverage.exec"/>
            </jacoco:executiondata>
            <jacoco:structure name="${project.name}">
                <jacoco:classfiles>
                    <fileset dir="${build.main.dir}"/>
                </jacoco:classfiles>
                <jacoco:sourcefiles encoding="UTF-8" tabwidth="4">
                    <fileset dir="${src.main.java.dir}"/>
                </jacoco:sourcefiles>
            </jacoco:structure>
            <jacoco:html destdir="${build.reports.coverage.dir}" encoding="UTF-8" locale="en_US"/>
            <jacoco:xml destfile="${build.reports.coverage.dir}/${project.name}-coverage.xml" encoding="UTF-8"/>
        </jacoco:report>
        <fail if="test.failed">One or more unit tests failed/errored. Check ${build.reports.unittest.dir} for details.</fail>
        <property name="test.run" value="true"/>
    </target>

    <target name="findbugs" description="Runs findbugs on this project." depends="-create-paths, -load-third-party-tasks, -main-classes, -test-classes">
        <mkdir dir="${build.reports.findbugs.dir}"/>
        <path id="aux-classpath">
            <path refid="compile-main-classpath"/>
            <path refid="test-classpath"/>
            <path refid="build-classpath"/>
            <path refid="findbugs-classpath"/>
        </path>
        <findbugs:findbugs classpathref="findbugs-classpath" pluginlist="" output="xml:withMessages" outputFile="${build.reports.findbugs.dir}/${project.name}-findbugs.xml" jvmargs="-Xms${findbugs.mem.initial} -Xmx${findbugs.mem.max}">
            <findbugs:class location="${build.main.dir}"/>
            <findbugs:class location="${build.test.dir}"/>
            <findbugs:auxClasspath refid="aux-classpath"/>
            <findbugs:sourcePath path="${src.main.java.dir}"/>
            <findbugs:sourcePath path="${src.test.java.dir}"/>
        </findbugs:findbugs>
        <xslt in="${build.reports.findbugs.dir}/${project.name}-findbugs.xml" out="${build.reports.findbugs.dir}/${project.name}-findbugs.html">
            <style>
                <url url="jar:file:${dependency.findbugs.findbugs}!/default.xsl"/>
            </style>
        </xslt>
    </target>

    <target name="check" description="Runs all checks." depends="findbugs, test"/>

    <target name="jxr" description="Generates a JXR report for this project." depends="-load-third-party-tasks">
        <mkdir dir="${build.reports.xref.dir}"/>
        <jxr:jxr destdir="${build.reports.xref.dir}" sourcepath="${src.main.java.dir}" inputencoding="UTF-8" outputencoding="UTF-8"/>
    </target>
</project>
